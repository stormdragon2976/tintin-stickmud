#ACTION {^{.+ returns to its own plane of existance\.|Your image disintegrates to atoms and vanishes\.|.+'s shadow reunites with its master\.|Your ki reverts back to its normal flow\.|Your crown dims\.}$}
{
    SYNTH_PLAY warningSound
}
{9}

#ACTION {^As %* falls, there is a bright flash!$}
{
    #nop {Hook name: flash};
    #nop {Hook args: Name of mob.};
    @do_hook{flash,%1};
    PLAY kill_flash.wav
}
{9}


#ALIAS {^Channel_Event %S %2}
{
    #if {{%1} == {broadcast}}
    {
        PLAY broadcast.wav
    };
    #else
    {
        SYNTH_PLAY %1Channel
    };
    #list {channel[All]} {insert} {1} {%2};
    #list {channel[%1]} {insert} {1} {%2};
    #list {channel[%1]} {size} {i};
    #if {$i >= 11}
    {
        #list {channel[%1]} {delete} {11}
    };
    #unvariable {i};
    @extract_link{%2}
}
{9}

#ALIAS {^NOTIFY %1}
{
    #if {!&{character[notify]}}
    {
        #variable {character[notify]} {top}
    };
    #switch {{${character[notify]}}}
    {
        #case {{inline}}
        {
            #line ignore #showme {%1}
        };
        #case {{notify-send}}
        {
            #system {notify-send %1}
        };
        #default
        {
            #if {!&{splitLines}}
            {
                #variable {splitLines} {1}
            };
            #local {rowsNeeded} {1};
            @var_save{lines};
            #variable {lines} {@fold{%1}};
            #list {lines} {size} {rowsNeeded};
            #local {rows} {};
            #screen get rows rows;
            #if {$rowsNeeded > $currentSplitRows && $rowsNeeded <= $rows / 8}
            {
                #split {$rowsNeeded} {$splitLines};
                #variable {currentSplitRows} {$rowsNeeded}
            };
            #elseif {$rowsNeeded > $rows / 8}
            {
                @var_restore{lines};
                NOTIFY Error: notification too long -- $rowsNeeded rows.;
                #return
            };
            @var_save{z};
            #variable {z} {0};
            #foreach {*{lines[]}} {z}
            {
                #line ignore #showme {${lines[$z]}} {$z}
            };
            #if {$z < $currentSplitRows}
            {
                @var_save{counter};
                #math {counter} {$z + 1};
                #loop {$counter} {$currentSplitRows} {counter}
                {
                    #showme {@separator{}} {$counter}
                };
                @var_restore{counter}
            };
            @var_restore{z};
            @var_restore{lines}
        }
    }
}
{9}

#ALIAS {^display_channel %w %d}
{
    NOTIFY ${channel[%1][%2]}
}
{9}

#ALIAS {^notify %S$}
{
    #switch {{%1}}
    {
        #case {{inline}}
        {
            #variable {character[notify]} {%1};
            NOTIFY Notification type set to %1.
        };
        #case {{notify-send}}
        {
            #variable {character[notify]} {%1};
            NOTIFY Notification type set to %1.
        };
        #case {{top}}
        {
            #variable {character[notify]} {%1};
            NOTIFY Notification type set to %1.
        };
        #default
        {
            NOTIFY Unknown notification option "%1".
        }
    }
}
{9}

#ALIAS {^splitlines %d$}
{
    #split {$currentSplitRows} {%1};
    NOTIFY Bottom split lines set to %1;
    #variable {splitLines} {%1}
}
{9}

#ALIAS {^view %s%w$}
{
    #format {i} {%n} {%2};
    #replace {i} {Repl{y|ies}} {Tell};
    #if {&{channel[$i]}}
    {
        #list {channelBuffer} {find} {$i} {channelBufferIndex};
        #if {$channelBufferIndex == 0}
        {
            #list {channelBuffer} {add} {$i};
            #list {channelBuffer} {find} {$i} {channelBufferIndex}
        };
        NOTIFY Channel buffer set to ${channelBuffer[$channelBufferIndex]}
    };
    #else
    {
        NOTIFY Nothing to show for channel $i.
    }
}
{9}



#EVENT {VARIABLE UPDATE GMCP_COMM_CHANNEL_TEXT}
{
    #local {tmp} {%1};
    #if {&{tmp} && {${tmp[text]}} != {}}
    {
        Channel_Event ${tmp[channel]} ${tmp[text]}
    }
}


#MACRO {\c!}
{
    #variable {channelBufferIndex} {13};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\cB}
{
    #system {echo 'talk' > ~/.config/barnard/cmd}
}

#MACRO {\e!}
{
    #variable {channelBufferIndex} {2};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e#}
{
    #variable {channelBufferIndex} {4};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e$}
{
    #variable {channelBufferIndex} {5};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e%}
{
    #variable {channelBufferIndex} {6};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e&}
{
    #variable {channelBufferIndex} {8};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e(}
{
    #variable {channelBufferIndex} {10};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e)}
{
    #variable {channelBufferIndex} {11};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e*}
{
    #variable {channelBufferIndex} {9};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e-}
{
    #if {!&{channelBufferIndex} || $channelBufferIndex <= 1}
    {
        #variable {channelBufferIndex} {1}
    };
    #else
    {
        #math {channelBufferIndex} {$channelBufferIndex - 1}
    };
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e0}
{
    display_channel $channelBuffer[$channelBufferIndex] 10
}

#MACRO {\e1}
{
    display_channel $channelBuffer[$channelBufferIndex] 1
}

#MACRO {\e2}
{
    display_channel $channelBuffer[$channelBufferIndex] 2
}

#MACRO {\e3}
{
    display_channel $channelBuffer[$channelBufferIndex] 3
}

#MACRO {\e4}
{
    display_channel $channelBuffer[$channelBufferIndex] 4
}

#MACRO {\e5}
{
    display_channel $channelBuffer[$channelBufferIndex] 5
}

#MACRO {\e6}
{
    display_channel $channelBuffer[$channelBufferIndex] 6
}

#MACRO {\e7}
{
    display_channel $channelBuffer[$channelBufferIndex] 7
}

#MACRO {\e8}
{
    display_channel $channelBuffer[$channelBufferIndex] 8
}

#MACRO {\e9}
{
    display_channel $channelBuffer[$channelBufferIndex] 9
}

#MACRO {\e=}
{
    #if {!&{channelBufferIndex} || $channelBufferIndex >= @list_size{channelBuffer}}
    {
        #variable {channelBufferIndex} {@list_size{channelBuffer}}
    };
    #else
    {
        #math {channelBufferIndex} {$channelBufferIndex + 1}
    };
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e@}
{
    #variable {channelBufferIndex} {3};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\eOP}
{
    #variable {channelBufferIndex} {13};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\eOQ}
{
    #variable {channelBufferIndex} {14};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\eOR}
{
    #variable {channelBufferIndex} {15};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\eOS}
{
    #variable {channelBufferIndex} {16};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e[1;3C}
{
    #nop {Alt right arrow};
    #if {!&{channelBufferIndex} || $channelBufferIndex >= @list_size{channelBuffer}}
    {
        #variable {channelBufferIndex} {@list_size{channelBuffer}}
    };
    #else
    {
        #math {channelBufferIndex} {$channelBufferIndex + 1}
    };
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e[1;3D}
{
    #nop {Alt left arrow};
    #if {!&{channelBufferIndex} || $channelBufferIndex <= 1}
    {
        #variable {channelBufferIndex} {1}
    };
    #else
    {
        #math {channelBufferIndex} {$channelBufferIndex - 1}
    };
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e^}
{
    #variable {channelBufferIndex} {7};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e`}
{
    #variable {channelBufferIndex} {12};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}

#MACRO {\e~}
{
    #variable {channelBufferIndex} {1};
    #showme {Channel buffer set to $channelBuffer[$channelBufferIndex]}
}



#VARIABLE {channel} {}
#VARIABLE {channelBuffer}
{
    {1} {All}
    {2} {ooc}
    {3} {Tell}
    {4} {newbie}
    {5} {broadcast}
}
#VARIABLE {channelBufferIndex} {1}
#VARIABLE {currentSplitRows} {1}

